#Requires AutoHotkey v2.0
#SingleInstance Force
;@Ahk2Exe-SetName keymapTray
;@Ahk2Exe-SetDescription keymapTray - “谱匣”的辅助增强程序
;@Ahk2Exe-SetCopyright Copyright (c) CataeroGong
;@Ahk2Exe-SetVersion 1.1.0

FileEncoding("UTF-8-RAW")
DetectHiddenWindows True
InstallKeybdHook

KEYMAP_TITLE := "键谱 【精装礼盒版 *^____^* 】"

SplitPath(A_ScriptFullPath, , &_DIR, &_EXT, &_NAME, &_DRIVE)

IniFile := A_ScriptDir . "\" . _NAME . ".ini"
LogFile := A_ScriptDir . "\" . _NAME . ".log"

ExeFile := A_ScriptDir . "\keymap.exe"
If (FileExist(ExeFile))
    ExeFile := "`"" . ExeFile . "`""
Else {
    MsgBox("Can not find 'keymap.exe' !")
    ExitApp
}

debug := StrLower(IniRead(IniFile, "Default", "debug", ""))
If debug == "true" || debug == "1"
    debug := True
Else
    debug := False
hotkey1 := IniRead(IniFile, "Default", "hotkey1", "")
hotkey2 := IniRead(IniFile, "Default", "hotkey2", "")
hotkeyGWI := IniRead(IniFile, "Default", "hotkey_GetWinInfo", "")
kms := IniRead(IniFile, "Keymaps")
keymaps := Array()
Loop Parse, kms, "`n", A_Space A_Tab
{
    a := StrSplit(A_LoopField, "=", A_Space A_Tab, 2)
    If (a.Length == 2) {
        keymaps.Push(a)
    }
}

ToggleKeyMap(params*) {
    If WinActive(KEYMAP_TITLE)
        HideKeymap()
    Else
        ShowKeymap()
}
ToggleKeyMap2(params*)
{
    if (A_ThisHotkey == A_PriorHotkey) && (A_TimeSincePriorHotkey < 300) {
        ToggleKeyMap()
    }
}
ShowKeymap(params*) {
    Global
    T := ""
    P := ""
    For km In keymaps {
        If km[1] && WinActive(km[1]) {
            T := km[1]
            P := " " . km[2]
            Break
        }
    }
    If (debug) {
        FileAppend("窗口标题=" . WinGetTitle("A") . ", 关键字=" . T . ", 谱匣参数=" . P . "`n", LogFile)
    }
    Run(ExeFile . P)
}
HideKeymap(params*) {
    If WinExist(KEYMAP_TITLE) {
        WinHide(KEYMAP_TITLE)
    }
}
ExitKeymap(ExitReason, ExitCode) {
    If WinExist(KEYMAP_TITLE) {
        WinClose(KEYMAP_TITLE)
    }
}
ShowActiveWindowInfo(params*) {
    hwnd := WinExist("A")
    If (!hwnd)
        Return
    id := "ahk_id " . hwnd
    title := WinGetTitle(id)
    exe := WinGetProcessName(id)
    path := WinGetProcessPath(id)
    cls := WinGetClass(id)
    pid := WinGetPID(id)
    MsgBox("【窗口标题】`n" . title . "`n`n"
        . "【执行文件】`nahk_exe " . exe "`nahk_exe " . path . "`n`n"
        . "【窗口类】`nahk_class " . cls . "`n`n"
        . "【进程ID】`nahk_pid " . pid . "`n`n"
        . "【窗口句柄】`nahk_id " . hwnd . "`n`n"
        . "* Ctrl+C 复制信息`n`n"
        , "当前窗口信息")
}
ShowHotkeys(params*) {
    MsgBox("显示/隐藏【键谱】(组合键): " . hotkey1 . "`n`n"
        . "显示/隐藏【键谱】(双击键): " . hotkey2 . "`n`n"
        . "获取当前窗口信息：" . hotkeyGWI . "`n`n"
        . "-------------------------`n"
        . "常用 AHK 修饰键:`n^:Ctrl, !:Alt, +:Shift, #:Win"
        , "keymapTray 热键")
}
EditConfig(params*) {
    Run(IniFile)
}
ReloadConfig(params*) {
    Global
    debug := StrLower(IniRead(IniFile, "Default", "debug", ""))
    If debug == "true" || debug == "1"
        debug := True
    Else
        debug := False
    hotkey1_new := IniRead(IniFile, "Default", "hotkey1", "")
    hotkey2_new := IniRead(IniFile, "Default", "hotkey2", "")
    hotkeyGWI_new := IniRead(IniFile, "Default", "hotkey_GetWinInfo", "")
    kms := IniRead(IniFile, "Keymaps")
    keymaps := Array()
    Loop Parse, kms, "`n", A_Space A_Tab
    {
        a := StrSplit(A_LoopField, "=", A_Space A_Tab, 2)
        If (a.Length == 2) {
            keymaps.Push(a)
        }
    }
    if (hotkey1 != hotkey1_new) {
        Try
            If (hotkey1)
                Hotkey(hotkey1, "Off")
        hotkey1 := hotkey1_new
        if (hotkey1)
            Hotkey(hotkey1, ToggleKeyMap, "On")
    }
    if (hotkey2 != hotkey2_new) {
        Try
            If (hotkey2)
                Hotkey("~" . hotkey2 . " UP", "Off")
        hotkey2 := hotkey2_new
        if (hotkey2)
            Hotkey("~" . hotkey2 . " UP", ToggleKeyMap2, "On")
    }
    if (hotkeyGWI != hotkeyGWI_new) {
        Try
            If (hotkeyGWI)
                Hotkey(hotkeyGWI, "Off")
        hotkeyGWI := hotkeyGWI_new
        if (hotkeyGWI)
            Hotkey(hotkeyGWI, ShowActiveWindowInfo, "On")
    }
}

If (hotkey1) {
    Hotkey(hotkey1, ToggleKeyMap)
}
If (hotkey2) {
    Hotkey("~" . hotkey2 . " UP", ToggleKeyMap2)
}
If (hotkeyGWI) {
    Hotkey(hotkeyGWI, ShowActiveWindowInfo)
}

OnExit(ExitKeymap)

Pos := 0
A_TrayMenu.Insert(++Pos . "&", "显示【键谱】", ShowKeymap)
A_TrayMenu.Insert(++Pos . "&", "隐藏【键谱】", HideKeymap)
A_TrayMenu.Insert(++Pos . "&")
A_TrayMenu.Insert(++Pos . "&", "热键信息", ShowHotkeys)
A_TrayMenu.Insert(++Pos . "&", "编辑配置文件", EditConfig)
A_TrayMenu.Insert(++Pos . "&", "重新读取配置文件", ReloadConfig)
A_TrayMenu.Insert(++Pos . "&")
A_TrayMenu.Default := "1&"
A_IconTip := "Keymap Tray"
